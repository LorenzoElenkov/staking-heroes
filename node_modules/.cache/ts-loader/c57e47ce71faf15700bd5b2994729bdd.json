{"remainingRequest":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/composables/cluster.ts","dependencies":[{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/composables/cluster.ts","mtime":1659781455226},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/babel.config.js","mtime":1659781455223},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1659782032013},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1659782043109}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9lbGVua292bG9yZW56by9zdGFraW5nLWhlcm9lcy9nZW0tZmFybS9hcHAvZ2VtLWZhcm0vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCB7IHJlYWRvbmx5LCByZWYgfSBmcm9tICd2dWUnOwppbXBvcnQgeyBDb25uZWN0aW9uIH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKZXhwb3J0IHZhciBDbHVzdGVyOwoKKGZ1bmN0aW9uIChDbHVzdGVyKSB7CiAgQ2x1c3RlclsiTWFpbm5ldCJdID0gIm1haW5uZXQiOwogIENsdXN0ZXJbIkRldm5ldCJdID0gImRldm5ldCI7CiAgQ2x1c3RlclsiVGVzdG5ldCJdID0gInRlc3RuZXQiOwogIENsdXN0ZXJbIkxvY2FsbmV0Il0gPSAibG9jYWxuZXQiOwp9KShDbHVzdGVyIHx8IChDbHVzdGVyID0ge30pKTsKCnZhciBjbHVzdGVyVVJMTWFwcGluZyA9IHsKICBtYWlubmV0OiBwcm9jZXNzLmVudi5WVUVfQVBQX01BSU5ORVRfVVJMIHx8ICdodHRwczovL2FwaS5tYWlubmV0LWJldGEuc29sYW5hLmNvbScsCiAgZGV2bmV0OiBwcm9jZXNzLmVudi5WVUVfQVBQX0RFVk5FVF9VUkwgfHwgJ2h0dHBzOi8vYXBpLmRldm5ldC5zb2xhbmEuY29tJywKICB0ZXN0bmV0OiBwcm9jZXNzLmVudi5WVUVfQVBQX1RFU1RORVRfVVJMIHx8ICdodHRwczovL2FwaS50ZXN0bmV0LnNvbGFuYS5jb20nLAogIGxvY2FsbmV0OiBwcm9jZXNzLmVudi5WVUVfQVBQX0xPQ0FMTkVUX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4ODk5Jwp9Owp2YXIgY2x1c3RlciA9IHJlZihDbHVzdGVyLk1haW5uZXQpOwpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDbHVzdGVyKCkgewogIHZhciBnZXRDbHVzdGVyVVJMID0gZnVuY3Rpb24gZ2V0Q2x1c3RlclVSTCgpIHsKICAgIHJldHVybiBjbHVzdGVyVVJMTWFwcGluZ1tjbHVzdGVyLnZhbHVlXTsKICB9OwoKICB2YXIgZ2V0VG9rZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KHByb2Nlc3MuZW52LlZVRV9BUFBfR0VOR09fQVVUSCk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudC5kYXRhLmFjY2Vzc190b2tlbik7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpOwoKICAgIHJldHVybiBmdW5jdGlvbiBnZXRUb2tlbigpIHsKICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB2YXIgZ2V0Q29ubmVjdGlvbiA9IGZ1bmN0aW9uIGdldENvbm5lY3Rpb24oY29tbWl0bWVudCkgewogICAgcmV0dXJuIG5ldyBDb25uZWN0aW9uKGdldENsdXN0ZXJVUkwoKSwgewogICAgICBjb21taXRtZW50OiBjb21taXRtZW50ICE9PSBudWxsICYmIGNvbW1pdG1lbnQgIT09IHZvaWQgMCA/IGNvbW1pdG1lbnQgOiAncHJvY2Vzc2VkJwogICAgfSk7CiAgfTsKCiAgdmFyIHNldENsdXN0ZXIgPSBmdW5jdGlvbiBzZXRDbHVzdGVyKG5ld0NsdXN0ZXIpIHsKICAgIGNsdXN0ZXIudmFsdWUgPSBuZXdDbHVzdGVyOyAvLyBjYXBwaW5nIGF0IDEwIGNoYXJzIGR1ZSB0byBzZWN1cml0eSAobm90IHRvIGV4cG9zZSB0aGUgdG9rZW4pCgogICAgY29uc29sZS5sb2coIkNsdXN0ZXIgdXBkYXRlZCwgbm93ICIuY29uY2F0KG5ld0NsdXN0ZXIsICIgKCIpLmNvbmNhdChnZXRDbHVzdGVyVVJMKCkuc3Vic3RyKDAsIDEwKSwgIikiKSk7CiAgfTsKCiAgcmV0dXJuIHsKICAgIGNsdXN0ZXI6IHJlYWRvbmx5KGNsdXN0ZXIpLAogICAgZ2V0Q2x1c3RlclVSTDogZ2V0Q2x1c3RlclVSTCwKICAgIGdldENvbm5lY3Rpb246IGdldENvbm5lY3Rpb24sCiAgICBzZXRDbHVzdGVyOiBzZXRDbHVzdGVyCiAgfTsKfQ=="},{"version":3,"sources":["/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/composables/cluster.ts"],"names":[],"mappings":";;;AAAA,SAAS,QAAT,EAAmB,GAAnB,QAA8B,KAA9B;AACA,SAAqB,UAArB,QAAuC,iBAAvC;AAEA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAA,IAAY,OAAZ;;AAAA,CAAA,UAAY,OAAZ,EAAmB;AACjB,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,OAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,OAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACD,CALD,EAAY,OAAO,KAAP,OAAO,GAAA,EAAA,CAAnB;;AAOA,IAAM,iBAAiB,GAAG;AACxB,EAAA,OAAO,EACL,OAAO,CAAC,GAAR,CAAY,mBAAZ,IAAmC,qCAFb;AAGxB,EAAA,MAAM,EAAE,OAAO,CAAC,GAAR,CAAY,kBAAZ,IAAkC,+BAHlB;AAIxB,EAAA,OAAO,EAAE,OAAO,CAAC,GAAR,CAAY,mBAAZ,IAAmC,gCAJpB;AAKxB,EAAA,QAAQ,EAAE,OAAO,CAAC,GAAR,CAAY,oBAAZ,IAAoC;AALtB,CAA1B;AAQA,IAAM,OAAO,GAAG,GAAG,CAAU,OAAO,CAAC,OAAlB,CAAnB;AAEA,eAAc,SAAU,UAAV,GAAoB;AAChC,MAAM,aAAa,GAAG,SAAhB,aAAgB;AAAA,WAAc,iBAAiB,CAAC,OAAO,CAAC,KAAT,CAA/B;AAAA,GAAtB;;AAEA,MAAM,QAAQ;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAER,KAAK,CAAC,GAAN,CAAU,OAAO,CAAC,GAAR,CAAY,kBAAtB,CAFQ;;AAAA;AAAA,6DAEmC,IAFnC,CAEwC,YAFxC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAR,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAIA,MAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,UAAD;AAAA,WACpB,IAAI,UAAJ,CAAe,aAAa,EAA5B,EAAgC;AAC9B,MAAA,UAAU,EAAE,UAAF,aAAE,UAAF,cAAE,UAAF,GAAgB;AADI,KAAhC,CADoB;AAAA,GAAtB;;AASA,MAAM,UAAU,GAAG,SAAb,UAAa,CAAC,UAAD,EAAwB;AACzC,IAAA,OAAO,CAAC,KAAR,GAAgB,UAAhB,CADyC,CAEzC;;AACA,IAAA,OAAO,CAAC,GAAR,gCAC0B,UAD1B,eACyC,aAAa,GAAG,MAAhB,CAAuB,CAAvB,EAA0B,EAA1B,CADzC;AAGD,GAND;;AAQA,SAAO;AACL,IAAA,OAAO,EAAE,QAAQ,CAAC,OAAD,CADZ;AAEL,IAAA,aAAa,EAAb,aAFK;AAGL,IAAA,aAAa,EAAb,aAHK;AAIL,IAAA,UAAU,EAAV;AAJK,GAAP;AAMD","sourcesContent":["import { readonly, ref } from 'vue';\nimport { Commitment, Connection } from '@solana/web3.js';\nimport { tokenAuthFetchMiddleware } from '@strata-foundation/web3-token-auth';\nimport axios from 'axios';\n\nexport enum Cluster {\n  Mainnet = 'mainnet',\n  Devnet = 'devnet',\n  Testnet = 'testnet',\n  Localnet = 'localnet',\n}\n\nconst clusterURLMapping = {\n  mainnet:\n    process.env.VUE_APP_MAINNET_URL || 'https://api.mainnet-beta.solana.com',\n  devnet: process.env.VUE_APP_DEVNET_URL || 'https://api.devnet.solana.com',\n  testnet: process.env.VUE_APP_TESTNET_URL || 'https://api.testnet.solana.com',\n  localnet: process.env.VUE_APP_LOCALNET_URL || 'http://localhost:8899',\n};\n\nconst cluster = ref<Cluster>(Cluster.Mainnet);\n\nexport default function useCluster() {\n  const getClusterURL = (): string => clusterURLMapping[cluster.value];\n\n  const getToken = async (): Promise<string> =>\n    // @ts-ignore\n    (await axios.get(process.env.VUE_APP_GENGO_AUTH)).data.access_token;\n\n  const getConnection = (commitment?: Commitment): Connection =>\n    new Connection(getClusterURL(), {\n      commitment: commitment ?? 'processed',\n      // fetchMiddleware: tokenAuthFetchMiddleware({\n      //   // tokenExpiry: 0,\n      //   getToken,\n      // }),\n    });\n\n  const setCluster = (newCluster: Cluster) => {\n    cluster.value = newCluster;\n    // capping at 10 chars due to security (not to expose the token)\n    console.log(\n      `Cluster updated, now ${newCluster} (${getClusterURL().substr(0, 10)})`\n    );\n  };\n\n  return {\n    cluster: readonly(cluster),\n    getClusterURL,\n    getConnection,\n    setCluster,\n  };\n}\n"],"sourceRoot":""}]}