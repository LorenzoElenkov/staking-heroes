{"remainingRequest":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/common/web3/NFTget.ts","dependencies":[{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/common/web3/NFTget.ts","mtime":1659781455225},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/babel.config.js","mtime":1659781455223},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1659782032013},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1659782043109}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9lbGVua292bG9yZW56by9zdGFraW5nLWhlcm9lcy9nZW0tZmFybS9hcHAvZ2VtLWZhcm0vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCB7IFB1YmxpY0tleSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7CmltcG9ydCB7IFRPS0VOX1BST0dSQU1fSUQgfSBmcm9tICdAc29sYW5hL3NwbC10b2tlbic7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCB7IHByb2dyYW1zIH0gZnJvbSAnQG1ldGFwbGV4L2pzJzsKdmFyIE1ldGFkYXRhID0gcHJvZ3JhbXMubWV0YWRhdGEuTWV0YWRhdGE7CgpmdW5jdGlvbiBnZXRUb2tlbnNCeU93bmVyKF94LCBfeDIpIHsKICByZXR1cm4gX2dldFRva2Vuc0J5T3duZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldFRva2Vuc0J5T3duZXIoKSB7CiAgX2dldFRva2Vuc0J5T3duZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUob3duZXIsIGNvbm4pIHsKICAgIHZhciB0b2tlbnM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gY29ubi5nZXRQYXJzZWRUb2tlbkFjY291bnRzQnlPd25lcihvd25lciwgewogICAgICAgICAgICAgIHByb2dyYW1JZDogVE9LRU5fUFJPR1JBTV9JRAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHRva2VucyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRva2Vucy52YWx1ZS5maWx0ZXIoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICB2YXIgYW1vdW50ID0gdC5hY2NvdW50LmRhdGEucGFyc2VkLmluZm8udG9rZW5BbW91bnQ7CiAgICAgICAgICAgICAgcmV0dXJuIGFtb3VudC5kZWNpbWFscyA9PT0gMCAmJiBhbW91bnQudWlBbW91bnQgPT09IDE7CiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBwdWJrZXk6IHQucHVia2V5LAogICAgICAgICAgICAgICAgbWludDogdC5hY2NvdW50LmRhdGEucGFyc2VkLmluZm8ubWludAogICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwogIHJldHVybiBfZ2V0VG9rZW5zQnlPd25lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBnZXRORlRNZXRhZGF0YShfeDMsIF94NCwgX3g1KSB7CiAgcmV0dXJuIF9nZXRORlRNZXRhZGF0YS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0TkZUTWV0YWRhdGEoKSB7CiAgX2dldE5GVE1ldGFkYXRhID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihtaW50LCBjb25uLCBwdWJrZXkpIHsKICAgIHZhciBtZXRhZGF0YVBEQSwgb25jaGFpbk1ldGFkYXRhLCBleHRlcm5hbE1ldGFkYXRhOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBNZXRhZGF0YS5nZXRQREEobWludCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBtZXRhZGF0YVBEQSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgIHJldHVybiBNZXRhZGF0YS5sb2FkKGNvbm4sIG1ldGFkYXRhUERBKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIG9uY2hhaW5NZXRhZGF0YSA9IF9jb250ZXh0Mi5zZW50LmRhdGE7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldChvbmNoYWluTWV0YWRhdGEuZGF0YS51cmkpOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgZXh0ZXJuYWxNZXRhZGF0YSA9IF9jb250ZXh0Mi5zZW50LmRhdGE7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgcHVia2V5OiBwdWJrZXkgPyBuZXcgUHVibGljS2V5KHB1YmtleSkgOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgbWludDogbmV3IFB1YmxpY0tleShtaW50KSwKICAgICAgICAgICAgICBvbmNoYWluTWV0YWRhdGE6IG9uY2hhaW5NZXRhZGF0YSwKICAgICAgICAgICAgICBleHRlcm5hbE1ldGFkYXRhOiBleHRlcm5hbE1ldGFkYXRhCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTM7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgY29uc29sZS5sb2coImZhaWxlZCB0byBwdWxsIG1ldGFkYXRhIGZvciB0b2tlbiAiLmNvbmNhdChtaW50KSk7CgogICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMCwgMTNdXSk7CiAgfSkpOwogIHJldHVybiBfZ2V0TkZUTWV0YWRhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldE5GVE1ldGFkYXRhRm9yTWFueShfeDYsIF94NykgewogIHJldHVybiBfZ2V0TkZUTWV0YWRhdGFGb3JNYW55LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRORlRNZXRhZGF0YUZvck1hbnkoKSB7CiAgX2dldE5GVE1ldGFkYXRhRm9yTWFueSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTModG9rZW5zLCBjb25uKSB7CiAgICB2YXIgcHJvbWlzZXMsIG5mdHM7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBwcm9taXNlcyA9IFtdOwogICAgICAgICAgICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgIHJldHVybiBwcm9taXNlcy5wdXNoKGdldE5GVE1ldGFkYXRhKHQubWludCwgY29ubiwgdC5wdWJrZXkpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIG5mdHMgPSBfY29udGV4dDMuc2VudC5maWx0ZXIoZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgICByZXR1cm4gISFuOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29uc29sZS5sb2coImZvdW5kICIuY29uY2F0KG5mdHMubGVuZ3RoLCAiIG1ldGFkYXRhcyIpKTsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIG5mdHMpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTMpOwogIH0pKTsKICByZXR1cm4gX2dldE5GVE1ldGFkYXRhRm9yTWFueS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0TkZUc0J5T3duZXIoX3g4LCBfeDkpIHsKICByZXR1cm4gX2dldE5GVHNCeU93bmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRORlRzQnlPd25lcigpIHsKICBfZ2V0TkZUc0J5T3duZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KG93bmVyLCBjb25uKSB7CiAgICB2YXIgdG9rZW5zOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gZ2V0VG9rZW5zQnlPd25lcihvd25lciwgY29ubik7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICB0b2tlbnMgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgY29uc29sZS5sb2coImZvdW5kICIuY29uY2F0KHRva2Vucy5sZW5ndGgsICIgdG9rZW5zIikpOwogICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgIHJldHVybiBnZXRORlRNZXRhZGF0YUZvck1hbnkodG9rZW5zLCBjb25uKTsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDQuc2VudCk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNCk7CiAgfSkpOwogIHJldHVybiBfZ2V0TkZUc0J5T3duZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},{"version":3,"sources":["/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/common/web3/NFTget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport axios from 'axios';\nimport { programs } from '@metaplex/js';\n\nconst {\n  metadata: { Metadata },\n} = programs;\n\nexport interface INFT {\n  pubkey?: PublicKey;\n  mint: PublicKey;\n  onchainMetadata: unknown;\n  externalMetadata: unknown;\n}\n\nasync function getTokensByOwner(owner: PublicKey, conn: Connection) {\n  const tokens = await conn.getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\n  return tokens.value\n    .filter((t) => {\n      const amount = t.account.data.parsed.info.tokenAmount;\n      return amount.decimals === 0 && amount.uiAmount === 1;\n    })\n    .map((t) => {\n      return { pubkey: t.pubkey, mint: t.account.data.parsed.info.mint };\n    });\n}\n\nasync function getNFTMetadata(\n  mint: string,\n  conn: Connection,\n  pubkey?: string\n): Promise<INFT | undefined> {\n  // console.log('Pulling metadata for:', mint);\n  try {\n    const metadataPDA = await Metadata.getPDA(mint);\n    const onchainMetadata = (await Metadata.load(conn, metadataPDA)).data;\n    const externalMetadata = (await axios.get(onchainMetadata.data.uri)).data;\n    return {\n      pubkey: pubkey ? new PublicKey(pubkey) : undefined,\n      mint: new PublicKey(mint),\n      onchainMetadata,\n      externalMetadata,\n    };\n  } catch (e) {\n    console.log(`failed to pull metadata for token ${mint}`);\n  }\n}\n\nexport async function getNFTMetadataForMany(\n  tokens: any[],\n  conn: Connection\n): Promise<INFT[]> {\n  const promises: Promise<INFT | undefined>[] = [];\n  tokens.forEach((t) => promises.push(getNFTMetadata(t.mint, conn, t.pubkey)));\n  const nfts = (await Promise.all(promises)).filter((n) => !!n);\n  console.log(`found ${nfts.length} metadatas`);\n\n  return nfts as INFT[];\n}\n\nexport async function getNFTsByOwner(\n  owner: PublicKey,\n  conn: Connection\n): Promise<INFT[]> {\n  const tokens = await getTokensByOwner(owner, conn);\n  console.log(`found ${tokens.length} tokens`);\n\n  return await getNFTMetadataForMany(tokens, conn);\n}\n"],"sourceRoot":""}]}