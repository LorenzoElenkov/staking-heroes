{"remainingRequest":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/views/Manager.vue?vue&type=script&lang=ts","dependencies":[{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/views/Manager.vue","mtime":1659781455227},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/babel.config.js","mtime":1659781455223},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1659782032013},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1659782043109},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1659782045677}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9lbGVua292bG9yZW56by9zdGFraW5nLWhlcm9lcy9nZW0tZmFybS9hcHAvZ2VtLWZhcm0vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCBDb25maWdQYW5lIGZyb20gJ0AvY29tcG9uZW50cy9Db25maWdQYW5lLnZ1ZSc7CmltcG9ydCB1c2VXYWxsZXQgZnJvbSAnQC9jb21wb3NhYmxlcy93YWxsZXQnOwppbXBvcnQgdXNlQ2x1c3RlciBmcm9tICdAL2NvbXBvc2FibGVzL2NsdXN0ZXInOwppbXBvcnQgVGVzdE1pbnQgZnJvbSAnQC9jb21wb25lbnRzL2dlbS1mYXJtL1Rlc3RNaW50LnZ1ZSc7CmltcG9ydCB7IGluaXRHZW1GYXJtIH0gZnJvbSAnQC9jb21tb24vZ2VtLWZhcm0nOwppbXBvcnQgSW5pdEZhcm0gZnJvbSAnQC9jb21wb25lbnRzL2dlbS1mYXJtL0luaXRGYXJtLnZ1ZSc7CmltcG9ydCB7IHN0cmluZ2lmeVBLc0FuZEJOcyB9IGZyb20gJ0BnZW13b3Jrcy9nZW0tZmFybS10cyc7CmltcG9ydCBBdXRob3JpemVGdW5kZXIgZnJvbSAnQC9jb21wb25lbnRzL2dlbS1mYXJtL0F1dGhvcml6ZUZ1bmRlci52dWUnOwppbXBvcnQgRnVuZENhbmNlbExvY2sgZnJvbSAnQC9jb21wb25lbnRzL2dlbS1mYXJtL0Z1bmRDYW5jZWxMb2NrLnZ1ZSc7CmltcG9ydCBSZWZyZXNoRmFybWVyIGZyb20gJ0AvY29tcG9uZW50cy9nZW0tZmFybS9SZWZyZXNoRmFybWVyLnZ1ZSc7CmltcG9ydCBUcmVhc3VyeVBheW91dCBmcm9tICdAL2NvbXBvbmVudHMvZ2VtLWZhcm0vVHJlYXN1cnlQYXlvdXQudnVlJzsKaW1wb3J0IFRoZVdoaXRlbGlzdCBmcm9tICdAL2NvbXBvbmVudHMvZ2VtLWZhcm0vQmFua1doaXRlbGlzdC52dWUnOwppbXBvcnQgVXBkYXRlRmFybSBmcm9tICdAL2NvbXBvbmVudHMvZ2VtLWZhcm0vVXBkYXRlRmFybS52dWUnOwppbXBvcnQgRmFybURpc3BsYXkgZnJvbSAnQC9jb21wb25lbnRzL2dlbS1mYXJtL0Zhcm1EaXNwbGF5LnZ1ZSc7CmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgRmFybURpc3BsYXk6IEZhcm1EaXNwbGF5LAogICAgVXBkYXRlRmFybTogVXBkYXRlRmFybSwKICAgIFRoZVdoaXRlbGlzdDogVGhlV2hpdGVsaXN0LAogICAgVHJlYXN1cnlQYXlvdXQ6IFRyZWFzdXJ5UGF5b3V0LAogICAgUmVmcmVzaEZhcm1lcjogUmVmcmVzaEZhcm1lciwKICAgIEZ1bmRDYW5jZWxMb2NrOiBGdW5kQ2FuY2VsTG9jaywKICAgIEF1dGhvcml6ZUZ1bmRlcjogQXV0aG9yaXplRnVuZGVyLAogICAgSW5pdEZhcm06IEluaXRGYXJtLAogICAgVGVzdE1pbnQ6IFRlc3RNaW50LAogICAgQ29uZmlnUGFuZTogQ29uZmlnUGFuZQogIH0sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkgewogICAgdmFyIF91c2VXYWxsZXQgPSB1c2VXYWxsZXQoKSwKICAgICAgICB3YWxsZXQgPSBfdXNlV2FsbGV0LndhbGxldCwKICAgICAgICBnZXRXYWxsZXQgPSBfdXNlV2FsbGV0LmdldFdhbGxldDsKCiAgICB2YXIgX3VzZUNsdXN0ZXIgPSB1c2VDbHVzdGVyKCksCiAgICAgICAgY2x1c3RlciA9IF91c2VDbHVzdGVyLmNsdXN0ZXIsCiAgICAgICAgZ2V0Q29ubmVjdGlvbiA9IF91c2VDbHVzdGVyLmdldENvbm5lY3Rpb247CgogICAgdmFyIGdmOwogICAgd2F0Y2goW3dhbGxldCwgY2x1c3Rlcl0sIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gaW5pdEdlbUZhcm0oZ2V0Q29ubmVjdGlvbigpLCBnZXRXYWxsZXQoKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZ2YgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBmaW5kRmFybXNCeU1hbmFnZXIoZ2V0V2FsbGV0KCkucHVibGljS2V5KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkpOyAvL25lZWRlZCBpbiBjYXNlIHdlIHN3aXRjaCBpbiBmcm9tIGFub3RoZXIgd2luZG93CgogICAgb25Nb3VudGVkKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoIShnZXRXYWxsZXQoKSAmJiBnZXRDb25uZWN0aW9uKCkpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gaW5pdEdlbUZhcm0oZ2V0Q29ubmVjdGlvbigpLCBnZXRXYWxsZXQoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZ2YgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGZpbmRGYXJtc0J5TWFuYWdlcihnZXRXYWxsZXQoKS5wdWJsaWNLZXkpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKTsgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGZhcm0gbG9jYXRvcgoKICAgIHZhciBmb3VuZEZhcm1zID0gcmVmKFtdKTsKICAgIHZhciBmYXJtID0gcmVmKCk7CiAgICB2YXIgZmFybUFjYyA9IHJlZigpOwogICAgdmFyIGN1cnJlbnRGYXJtSW5kZXggPSByZWYoMCk7CiAgICB2YXIgaXNMb2FkaW5nID0gcmVmKHRydWUpOyAvL3doZW5ldmVyIHdlIGNoYW5nZSB0aGUgZmFybSwgd2UgdXBkYXRlIHRoZSBpbmRleC9hY2NvdW50CgogICAgd2F0Y2goZmFybSwgZnVuY3Rpb24gKG5ld0Zhcm0pIHsKICAgICAgdXBkYXRlRmFybUJ5UGsobmV3RmFybSk7CiAgICB9KTsKCiAgICB2YXIgdXBkYXRlRmFybUJ5UGsgPSBmdW5jdGlvbiB1cGRhdGVGYXJtQnlQayhuZXdGYXJtKSB7CiAgICAgIHZhciBpZHggPSBmb3VuZEZhcm1zLnZhbHVlLmZpbmRJbmRleChmdW5jdGlvbiAoZmYpIHsKICAgICAgICByZXR1cm4gZmYucHVibGljS2V5LnRvQmFzZTU4KCkgPT09IG5ld0Zhcm07CiAgICAgIH0pOwogICAgICBjdXJyZW50RmFybUluZGV4LnZhbHVlID0gaWR4OwogICAgICBmYXJtQWNjLnZhbHVlID0gZm91bmRGYXJtcy52YWx1ZVtpZHhdLmFjY291bnQ7CiAgICB9OwoKICAgIHZhciBmaW5kRmFybXNCeU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKG1hbmFnZXIpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGdmLmZldGNoQWxsRmFybVBEQXMobWFuYWdlcik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGZvdW5kRmFybXMudmFsdWUgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBmYXJtczonLCBzdHJpbmdpZnlQS3NBbmRCTnMoZm91bmRGYXJtcy52YWx1ZSkpOwoKICAgICAgICAgICAgICAgIGlmIChmb3VuZEZhcm1zLnZhbHVlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICBmYXJtLnZhbHVlID0gZm91bmRGYXJtcy52YWx1ZVtjdXJyZW50RmFybUluZGV4LnZhbHVlXS5wdWJsaWNLZXkudG9CYXNlNTgoKTsgLy95ZXMgdGhpcyBpcyBuZWVkZWQgaGVyZSwgYXMgc29tZXRpbWVzIGZhcm0udmFsdWUgc3RheXMgc2FtZSwgYnV0IHdlIHdhbnQgdG8gcmVyZW5kZXIgYW55d2F5CgogICAgICAgICAgICAgICAgICB1cGRhdGVGYXJtQnlQayhmYXJtLnZhbHVlKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpc0xvYWRpbmcudmFsdWUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZpbmRGYXJtc0J5TWFuYWdlcihfeCkgewogICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVzdAoKCiAgICB2YXIgc2hvd05ld0Zhcm0gPSByZWYoZmFsc2UpOwoKICAgIHZhciBoYW5kbGVOZXdGYXJtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChuZXdGYXJtKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHNob3dOZXdGYXJtLnZhbHVlID0gZmFsc2U7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZmluZEZhcm1zQnlNYW5hZ2VyKGdldFdhbGxldCgpLnB1YmxpY0tleSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGZhcm0udmFsdWUgPSBuZXdGYXJtOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlTmV3RmFybShfeDIpIHsKICAgICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICB2YXIgaGFuZGxlVXBkYXRlRmFybSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmNSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRmFybXNCeU1hbmFnZXIoZ2V0V2FsbGV0KCkucHVibGljS2V5KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1KTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUZhcm0oKSB7CiAgICAgICAgcmV0dXJuIF9yZWY1LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCk7CgogICAgdmFyIHJlZnJlc2hGYXJtcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmNiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBmaW5kRmFybXNCeU1hbmFnZXIoZ2V0V2FsbGV0KCkucHVibGljS2V5KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2KTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlZnJlc2hGYXJtcygpIHsKICAgICAgICByZXR1cm4gX3JlZjYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICByZXR1cm4gewogICAgICBpc0xvYWRpbmc6IGlzTG9hZGluZywKICAgICAgd2FsbGV0OiB3YWxsZXQsCiAgICAgIGZvdW5kRmFybXM6IGZvdW5kRmFybXMsCiAgICAgIGZhcm06IGZhcm0sCiAgICAgIGZhcm1BY2M6IGZhcm1BY2MsCiAgICAgIGhhbmRsZU5ld0Zhcm06IGhhbmRsZU5ld0Zhcm0sCiAgICAgIGhhbmRsZVVwZGF0ZUZhcm06IGhhbmRsZVVwZGF0ZUZhcm0sCiAgICAgIHNob3dOZXdGYXJtOiBzaG93TmV3RmFybSwKICAgICAgcmVmcmVzaEZhcm1zOiByZWZyZXNoRmFybXMKICAgIH07CiAgfQp9KTs="},{"version":3,"sources":["/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/views/Manager.vue?vue&type=script&lang=ts"],"names":[],"mappings":";;;AACA,SAAS,eAAT,EAA0B,SAA1B,EAAqC,GAArC,EAA0C,KAA1C,QAAuD,KAAvD;AACA,OAAO,UAAP,MAAuB,6BAAvB;AACA,OAAO,SAAP,MAAsB,sBAAtB;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,OAAO,QAAP,MAAqB,oCAArB;AACA,SAAS,WAAT,QAA4B,mBAA5B;AACA,OAAO,QAAP,MAAqB,oCAArB;AAEA,SAAS,kBAAT,QAAmC,uBAAnC;AACA,OAAO,eAAP,MAA4B,2CAA5B;AACA,OAAO,cAAP,MAA2B,0CAA3B;AACA,OAAO,aAAP,MAA0B,yCAA1B;AACA,OAAO,cAAP,MAA2B,0CAA3B;AACA,OAAO,YAAP,MAAyB,yCAAzB;AACA,OAAO,UAAP,MAAuB,sCAAvB;AACA,OAAO,WAAP,MAAwB,uCAAxB;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,UAAU,EAAE;AACV,IAAA,WAAW,EAAX,WADU;AAEV,IAAA,UAAU,EAAV,UAFU;AAGV,IAAA,YAAY,EAAZ,YAHU;AAIV,IAAA,cAAc,EAAd,cAJU;AAKV,IAAA,aAAa,EAAb,aALU;AAMV,IAAA,cAAc,EAAd,cANU;AAOV,IAAA,eAAe,EAAf,eAPU;AAQV,IAAA,QAAQ,EAAR,QARU;AASV,IAAA,QAAQ,EAAR,QATU;AAUV,IAAA,UAAU,EAAV;AAVU,GADiB;AAa7B,EAAA,KAb6B,mBAaxB;AACH,qBAA8B,SAAS,EAAvC;AAAA,QAAQ,MAAR,cAAQ,MAAR;AAAA,QAAgB,SAAhB,cAAgB,SAAhB;;AACA,sBAAmC,UAAU,EAA7C;AAAA,QAAQ,OAAR,eAAQ,OAAR;AAAA,QAAiB,aAAjB,eAAiB,aAAjB;;AAEA,QAAI,EAAJ;AACA,IAAA,KAAK,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,uEAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACZ,WAAW,CAAC,aAAa,EAAd,EAAkB,SAAS,EAA3B,CADC;;AAAA;AACvB,cAAA,EADuB;AAAA;AAAA,qBAEjB,kBAAkB,CAAC,SAAS,GAAI,SAAd,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB,GAAL,CALG,CAUH;;AACA,IAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJ,SAAS,MAAM,aAAa,EADxB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEK,WAAW,CAAC,aAAa,EAAd,EAAkB,SAAS,EAA3B,CAFhB;;AAAA;AAEN,cAAA,EAFM;AAAA;AAAA,qBAGA,kBAAkB,CAAC,SAAS,GAAI,SAAd,CAHlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT,CAXG,CAkBH;;AACA,QAAM,UAAU,GAAG,GAAG,CAAQ,EAAR,CAAtB;AACA,QAAM,IAAI,GAAG,GAAG,EAAhB;AACA,QAAM,OAAO,GAAG,GAAG,EAAnB;AACA,QAAM,gBAAgB,GAAG,GAAG,CAAS,CAAT,CAA5B;AACA,QAAM,SAAS,GAAG,GAAG,CAAU,IAAV,CAArB,CAvBG,CAyBH;;AACA,IAAA,KAAK,CAAC,IAAD,EAAO,UAAC,OAAD,EAAiB;AAC3B,MAAA,cAAc,CAAC,OAAD,CAAd;AACD,KAFI,CAAL;;AAIA,QAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,OAAD,EAAoB;AACzC,UAAM,GAAG,GAAG,UAAU,CAAC,KAAX,CAAiB,SAAjB,CACV,UAAC,EAAD;AAAA,eAAQ,EAAE,CAAC,SAAH,CAAa,QAAb,OAA4B,OAApC;AAAA,OADU,CAAZ;AAGA,MAAA,gBAAgB,CAAC,KAAjB,GAAyB,GAAzB;AACA,MAAA,OAAO,CAAC,KAAR,GAAgB,UAAU,CAAC,KAAX,CAAiB,GAAjB,EAAsB,OAAtC;AACD,KAND;;AAQA,QAAM,kBAAkB;AAAA,0EAAG,kBAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACA,EAAE,CAAC,gBAAH,CAAoB,OAApB,CADA;;AAAA;AACzB,gBAAA,UAAU,CAAC,KADc;AAEzB,gBAAA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,kBAAkB,CAAC,UAAU,CAAC,KAAZ,CAA9C;;AAEA,oBAAI,UAAU,CAAC,KAAX,CAAiB,MAArB,EAA6B;AAC3B,kBAAA,IAAI,CAAC,KAAL,GACE,UAAU,CAAC,KAAX,CAAiB,gBAAgB,CAAC,KAAlC,EAAyC,SAAzC,CAAmD,QAAnD,EADF,CAD2B,CAG3B;;AACA,kBAAA,cAAc,CAAC,IAAI,CAAC,KAAN,CAAd;AACD;;AACD,gBAAA,SAAS,CAAC,KAAV,GAAkB,KAAlB;;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAlB,kBAAkB;AAAA;AAAA;AAAA,OAAxB,CAtCG,CAmDH;;;AACA,QAAM,WAAW,GAAG,GAAG,CAAU,KAAV,CAAvB;;AAEA,QAAM,aAAa;AAAA,0EAAG,kBAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AACpB,gBAAA,WAAW,CAAC,KAAZ,GAAoB,KAApB;AADoB;AAAA,uBAEd,kBAAkB,CAAC,SAAS,GAAI,SAAd,CAFJ;;AAAA;AAGpB,gBAAA,IAAI,CAAC,KAAL,GAAa,OAAb;;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAb,aAAa;AAAA;AAAA;AAAA,OAAnB;;AAMA,QAAM,gBAAgB;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACjB,kBAAkB,CAAC,SAAS,GAAI,SAAd,CADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAhB,gBAAgB;AAAA;AAAA;AAAA,OAAtB;;AAIA,QAAM,YAAY;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACb,kBAAkB,CAAC,SAAS,GAAI,SAAd,CADL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAZ,YAAY;AAAA;AAAA;AAAA,OAAlB;;AAIA,WAAO;AACL,MAAA,SAAS,EAAT,SADK;AAEL,MAAA,MAAM,EAAN,MAFK;AAGL,MAAA,UAAU,EAAV,UAHK;AAIL,MAAA,IAAI,EAAJ,IAJK;AAKL,MAAA,OAAO,EAAP,OALK;AAML,MAAA,aAAa,EAAb,aANK;AAOL,MAAA,gBAAgB,EAAhB,gBAPK;AAQL,MAAA,WAAW,EAAX,WARK;AASL,MAAA,YAAY,EAAZ;AATK,KAAP;AAWD;AA5F4B,CAAD,CAA9B","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport ConfigPane from '@/components/ConfigPane.vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport TestMint from '@/components/gem-farm/TestMint.vue';\nimport { initGemFarm } from '@/common/gem-farm';\nimport InitFarm from '@/components/gem-farm/InitFarm.vue';\nimport { PublicKey } from '@solana/web3.js';\nimport { stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\nimport AuthorizeFunder from '@/components/gem-farm/AuthorizeFunder.vue';\nimport FundCancelLock from '@/components/gem-farm/FundCancelLock.vue';\nimport RefreshFarmer from '@/components/gem-farm/RefreshFarmer.vue';\nimport TreasuryPayout from '@/components/gem-farm/TreasuryPayout.vue';\nimport TheWhitelist from '@/components/gem-farm/BankWhitelist.vue';\nimport UpdateFarm from '@/components/gem-farm/UpdateFarm.vue';\nimport FarmDisplay from '@/components/gem-farm/FarmDisplay.vue';\n\nexport default defineComponent({\n  components: {\n    FarmDisplay,\n    UpdateFarm,\n    TheWhitelist,\n    TreasuryPayout,\n    RefreshFarmer,\n    FundCancelLock,\n    AuthorizeFunder,\n    InitFarm,\n    TestMint,\n    ConfigPane,\n  },\n  setup() {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n      await findFarmsByManager(getWallet()!.publicKey!);\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        await findFarmsByManager(getWallet()!.publicKey!);\n      }\n    });\n\n    // --------------------------------------- farm locator\n    const foundFarms = ref<any[]>([]);\n    const farm = ref<string>();\n    const farmAcc = ref<any>();\n    const currentFarmIndex = ref<number>(0);\n    const isLoading = ref<boolean>(true);\n\n    //whenever we change the farm, we update the index/account\n    watch(farm, (newFarm: any) => {\n      updateFarmByPk(newFarm);\n    });\n\n    const updateFarmByPk = (newFarm: string) => {\n      const idx = foundFarms.value.findIndex(\n        (ff) => ff.publicKey.toBase58() === newFarm\n      );\n      currentFarmIndex.value = idx;\n      farmAcc.value = foundFarms.value[idx].account;\n    };\n\n    const findFarmsByManager = async (manager: PublicKey) => {\n      foundFarms.value = await gf.fetchAllFarmPDAs(manager);\n      console.log('Found farms:', stringifyPKsAndBNs(foundFarms.value));\n\n      if (foundFarms.value.length) {\n        farm.value =\n          foundFarms.value[currentFarmIndex.value].publicKey.toBase58();\n        //yes this is needed here, as sometimes farm.value stays same, but we want to rerender anyway\n        updateFarmByPk(farm.value!);\n      }\n      isLoading.value = false;\n    };\n\n    // --------------------------------------- rest\n    const showNewFarm = ref<boolean>(false);\n\n    const handleNewFarm = async (newFarm: string) => {\n      showNewFarm.value = false;\n      await findFarmsByManager(getWallet()!.publicKey!);\n      farm.value = newFarm;\n    };\n\n    const handleUpdateFarm = async () => {\n      await findFarmsByManager(getWallet()!.publicKey!);\n    };\n\n    const refreshFarms = async () => {\n      await findFarmsByManager(getWallet()!.publicKey!);\n    };\n\n    return {\n      isLoading,\n      wallet,\n      foundFarms,\n      farm,\n      farmAcc,\n      handleNewFarm,\n      handleUpdateFarm,\n      showNewFarm,\n      refreshFarms,\n    };\n  },\n});\n"],"sourceRoot":""}]}