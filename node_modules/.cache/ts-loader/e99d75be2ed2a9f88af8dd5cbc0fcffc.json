{"remainingRequest":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js??ref--14-2!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/components/gem-farm/FundCancelLock.vue?vue&type=script&lang=ts","dependencies":[{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/components/gem-farm/FundCancelLock.vue","mtime":1659781455226},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/babel.config.js","mtime":1659781455223},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/babel-loader/lib/index.js","mtime":1659782032013},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/ts-loader/index.js","mtime":1659782043109},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js","mtime":1659782032043},{"path":"/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js","mtime":1659782045677}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/elenkovlorenzo/staking-heroes/gem-farm/app/gem-farm/src/components/gem-farm/FundCancelLock.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport { initGemFarm } from '@/common/gem-farm';\nimport { PublicKey } from '@solana/web3.js';\n\nexport default defineComponent({\n  props: {\n    farm: String,\n    farmAcc: Object,\n  },\n  emits: ['update-farm'],\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n      }\n    });\n\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        setRewardType(selectedReward.value);\n      }\n    });\n\n    // --------------------------------------- fund / cancel / lock\n    const selectedReward = ref<string>('rewardA');\n    const activeRewardType = ref<string>();\n\n    //fixed reward\n    const baseRate = ref<string>();\n    const denominator = ref<string>();\n    const t1RewardRate = ref<string>();\n    const t1RequiredTenure = ref<string>();\n    const t2RewardRate = ref<string>();\n    const t2RequiredTenure = ref<string>();\n    const t3RewardRate = ref<string>();\n    const t3RequiredTenure = ref<string>();\n\n    const amount = ref<string>();\n    const duration = ref<string>();\n\n    const setRewardType = (selectedReward: string) => {\n      activeRewardType.value = gf.parseRewardType(\n        props.farmAcc![selectedReward]\n      );\n    };\n\n    watch(selectedReward, (newReward: string) => {\n      setRewardType(newReward);\n    });\n\n    const fundReward = async () => {\n      if (activeRewardType.value === 'variable') {\n        await gf.fundVariableRewardWallet(\n          new PublicKey(props.farm!),\n          new PublicKey(props.farmAcc![selectedReward.value].rewardMint),\n          amount.value,\n          duration.value\n        );\n      } else {\n        await gf.fundFixedRewardWallet(\n          new PublicKey(props.farm!),\n          new PublicKey(props.farmAcc![selectedReward.value].rewardMint),\n          amount.value,\n          duration.value,\n          baseRate.value,\n          denominator.value,\n          t1RewardRate.value,\n          t1RequiredTenure.value,\n          t2RewardRate.value,\n          t2RequiredTenure.value,\n          t3RewardRate.value,\n          t3RequiredTenure.value\n        );\n      }\n      ctx.emit('update-farm');\n    };\n\n    const cancelReward = async () => {\n      await gf.cancelRewardWallet(\n        new PublicKey(props.farm!),\n        new PublicKey(props.farmAcc![selectedReward.value].rewardMint)\n      );\n      ctx.emit('update-farm');\n    };\n\n    const lockReward = async () => {\n      await gf.lockRewardWallet(\n        new PublicKey(props.farm!),\n        new PublicKey(props.farmAcc![selectedReward.value].rewardMint)\n      );\n      ctx.emit('update-farm');\n    };\n\n    return {\n      selectedReward,\n      activeRewardType,\n      baseRate,\n      denominator,\n      t1RewardRate,\n      t1RequiredTenure,\n      t2RewardRate,\n      t2RequiredTenure,\n      t3RewardRate,\n      t3RequiredTenure,\n      amount,\n      duration,\n      fundReward,\n      cancelReward,\n      lockReward,\n    };\n  },\n});\n"],"sourceRoot":""}]}